# -*- coding: utf-8 -*-
"""algorithm trading

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/emmanuelagy/a834b2ced8068c2f6c6c077128ecea0c/untitled1.ipynb
"""

pip install pandas-datareader

import pandas_datareader as pdr
import datetime
aapl = pdr.get_data_yahoo('AAPL', #AAPL is a dataframe which is 2-dimentional
                          #labeled data structure which has columns of potentially
                          #different types.
                    start = datetime.datetime(2006, 10, 1), 
                    end = datetime.datetime(2020, 1, 1))

aapl.head()

aapl.tail()

aapl.describe()

aapl.index

aapl.columns

data = aapl['Close'][-10:]

type(data)

print(aapl.loc['2008'].head()) #some dates are missing becuase of weekends

sample = aapl.sample(20)
print(sample)

saample = aapl.asfreq("M", method="bfill")
print(saample)

import matplotlib.pyplot as plt
#this allows us to visualise our time series data

aapl['Adj Close'].plot(grid=True)
plt.show()

import numpy as np

dailyclose = aapl[['Close']]
percentageofclose = dailyclose.pct_change()#for calculating daily percentage
print(percentageofclose)

#replacing NA with values of 0
percentageofclose.fillna(0, inplace=True)
print(percentageofclose)

#we can plot the distribution of the percentageofclose
percentageofclose.hist(bins=50)
plt.show()
print(percentageofclose.describe())

#the cumulative daily return allows you to work out the value of your investment at regular intervals
cumulativeDailyReturn = (1 +percentageofclose).cumprod()
print(cumulativeDailyReturn)

cumulativeDailyReturn.plot(figsize=(12,5))

def get(tickers, startdate, enddate):
  def data(ticker):
    return(pdr.get_data_yahoo(ticker, start=startdate, end=enddate))
    datas=map(data, tickers)
    return(pd.concat(datas, key=tickers, names=['ticker', 'Date']))

tickers = ['AAPL', 'MSFT', 'IBM', 'GOOG']
all_data = get(tickers, datetime.datetime(2006,10,1), datetime.datetime(2012, 1, 1))

adj_close_px = aapl['Adj Close']

moving_avg = adj_close_px.rolling(window=40).mean()

print(moving_avg[-10])

aapl['42'] = adj_close_px.rolling(window=40).mean()

aapl['252'] = adj_close_px.rolling(window=252).mean()

aapl[['Adj Close', '42', '252']].plot()
plt.show()



